{"mappings":"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","sources":["src/js/refs.js","node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","src/js/unsplashAPI.js","src/js/infinite-scroll.js","src/js/markup.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('.js-search-form'),\n  list: document.querySelector('.js-gallery'),\n};\n","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","// https://api.unsplash.com/search/photos?client_id=LxvKVGJqiSe6NcEVZOaLXC-f2JIIWZaq_o0WrF8mwJc&page=1&query=office\n\nexport class UnsplashAPI {\n  #BASE_URL = 'https://api.unsplash.com/search/photos';\n  #KEY = 'LxvKVGJqiSe6NcEVZOaLXC-f2JIIWZaq_o0WrF8mwJc';\n  #query = '';\n  #page = 1;\n  #per_page = 15;\n  #totalPhotos = 0;\n\n  getPhotos() {\n    return fetch(\n      `${this.#BASE_URL}?client_id=${this.#KEY}&page=${this.#page}&query=${\n        this.#query\n      }&per_page=${this.#per_page}&color=black_and_white&orientation=landscape`\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    });\n  }\n\n  setTotalPhotos(totalPhotos) {\n    this.#totalPhotos = totalPhotos;\n  }\n\n  hasMorePhotos() {\n    return this.#page < Math.ceil(this.#totalPhotos / this.#per_page);\n  }\n\n  get query() {\n    return this.#query;\n  }\n\n  set query(newQuery) {\n    this.#query = newQuery;\n  }\n}\n","// https://api.unsplash.com/search/photos?page=1&query=office\n\nimport { refs } from './refs';\nimport { UnsplashAPI } from './unsplashAPI';\nimport { createGalleryCards } from './markup';\n\nconst options = {\n  root: null,\n  rootMargin: '100px',\n  threshold: 1.0,\n};\n\nconst callback = function (entries, observer) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      console.log(entry.target);\n    }\n  });\n};\n\nconst observer = new IntersectionObserver(callback, options);\n\nrefs.form.addEventListener('submit', onSearch);\n\nconst unsplashAPI = new UnsplashAPI();\n\nfunction onSearch(event) {\n  event.preventDefault();\n\n  const value = event.currentTarget.elements.query.value;\n\n  if (!value) {\n    return alert('Input any data!');\n  }\n  refs.list.innerHTML = '';\n  unsplashAPI.query = value;\n\n  unsplashAPI\n    .getPhotos()\n    .then(({ results, total }) => {\n      if (results.length === 0) {\n        return alert('Enter normal value');\n      }\n      const markup = createGalleryCards(results);\n\n      refs.list.insertAdjacentHTML('beforeend', markup);\n      unsplashAPI.setTotalPhotos(total);\n      const hasMore = unsplashAPI.hasMorePhotos();\n      if (hasMore) {\n        const item = document.querySelector('.gallery__item:last-child');\n        observer.observe(item);\n      }\n    })\n    .catch(err => console.log(err));\n}\n","export function createGalleryCards(images) {\n  return images\n    .map(\n      ({ urls, alt_description }) => /*html*/ `<li class=\"gallery__item\">\n    <img src=\"${urls.small}\" alt=\"${alt_description}\" class=\"gallery-img\">\n</li>`\n    )\n    .join('');\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","list","$63a2a9cb56255ced$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$91f06d233fb295cb$export$2e2bcd8739ae039","descriptor","call","value","$cfafd7bd727718cb$export$2e2bcd8739ae039","$3b30310a11d769ec$export$2e2bcd8739ae039","obj","privateCollection","$a33675d45e16a910$export$2e2bcd8739ae039","set","$613067712a285d8d$export$2e2bcd8739ae039","writable","$97039f73d3457507$export$2e2bcd8739ae039","$e625a6b607d3167a$var$_BASE_URL","WeakMap","$e625a6b607d3167a$var$_KEY","$e625a6b607d3167a$var$_query","$e625a6b607d3167a$var$_page","$e625a6b607d3167a$var$_per_page","$e625a6b607d3167a$var$_totalPhotos","$7f13665ecc617d63$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","console","log","target","root","rootMargin","threshold","addEventListener","event","preventDefault","currentTarget","elements","query","alert","innerHTML","$7f13665ecc617d63$var$unsplashAPI","getPhotos","then","results","total","length","markup","map","urls","alt_description","small","join","insertAdjacentHTML","setTotalPhotos","hasMorePhotos","item","observe","catch","err","fetch","this","response","ok","Error","statusText","json","totalPhotos","Math","ceil","newQuery"],"version":3,"file":"infinite-scroll.92ac7291.js.map"}